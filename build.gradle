/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java library project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.5/userguide/building_java_projects.html in the Gradle documentation.
 * This project uses @Incubating APIs which are subject to change.
 */
plugins {
    id "java"
	id "jacoco"
	id "io.freefair.lombok" version "8.4"
}

repositories {
    mavenCentral()
}

dependencies {
	implementation group: 'org.apache.commons', name: 'commons-math3', version: '3.6.1'
	implementation 'org.apache.commons:commons-lang3:3.5'
	implementation group: 'commons-lang', name: 'commons-lang', version: '2.6'
	implementation "commons-collections:commons-collections:3.2.2"
	
	implementation group: 'com.google.code.gson', name: 'gson', version: '2.10.1'
	
	compileOnly group: 'org.projectlombok', name: 'lombok', version: '1.18.30'
	annotationProcessor group: 'org.projectlombok', name: 'lombok', version: '1.18.30'

	testCompileOnly group: 'org.projectlombok', name: 'lombok', version: '1.18.30'
	testAnnotationProcessor group: 'org.projectlombok', name: 'lombok', version: '1.18.30'

	testImplementation group: 'org.assertj', name: 'assertj-core', version: '3.25.2'
	testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: '5.10.0'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher:1.10.0'
	//testImplementation group: 'org.junit.platform', name: 'junit-platform-launcher', version: '1.10.0'
}

test {
	jacoco {
        enabled = true
        destinationFile = layout.buildDirectory.file("jacoco/${name}.exec").get().asFile
        includes = []
        excludes = []
        excludeClassLoaders = []
        includeNoLocationClasses = false
        sessionId = "<auto-generated value>"
        dumpOnExit = true
        classDumpDir = null
        output = JacocoTaskExtension.Output.FILE
        address = "localhost"
        port = 6300
        jmx = false
    }
    finalizedBy jacocoTestReport // report is always generated after tests run
}

jacoco {
    toolVersion = "0.8.9"
    reportsDirectory = layout.buildDirectory.dir('customJacocoReportDir')
}

jacocoTestReport {
	group = "reporting"
	description = "Generate Jacoco coverage reports after running tests."
    dependsOn test // tests are required to run before generating the report
	reports {
        xml.required = false
        csv.required = false
        html.outputLocation = layout.buildDirectory.dir('jacocoHtml')
    }
}

build.dependsOn jacocoTestReport

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                minimum = 0.5
            }
        }

        rule {
            enabled = false
            element = 'CLASS'
            includes = ['org.shortthirdman.leetcode.*']

            limit {
                counter = 'LINE'
                value = 'TOTALCOUNT'
                maximum = 0.45
            }
        }
    }
}

testing {
    suites {
        // Configure the built-in test suite
        test {
            // Use JUnit Jupiter test framework
            useJUnitJupiter('5.10.0')
        }
    }
}

group = "com.shortthirdman.leetcode"
version = '1.0.0-SNAPSHOT'
sourceCompatibility = "1.8"
targetCompatibility = "1.8"

compileJava {
    options.incremental = true
    options.fork = true
    options.failOnError = false
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(8)
    }
	// withJavadocJar()
    withSourcesJar()
}


jar {
    manifest {
        attributes("Implementation-Title": "Gradle",
                   "Implementation-Version": archiveVersion)
    }
}

//tasks.withType(JavaCompile).configureEach {
//    options.compilerArgs += ['-Xdoclint:none', '-Xlint:none', '-nowarn']
//}

tasks.register('performRelease') {
    def isCI = providers.gradleProperty("isCI")
    doLast {
        if (isCI.present) {
            println("Performing release actions")
        } else {
            throw new InvalidUserDataException("Cannot perform release outside of CI")
        }
    }
}

tasks.register('showRepos') {
    def repositoryNames = repositories.collect { it.name }
    doLast {
        println "All repos:"
        println repositoryNames
    }
}